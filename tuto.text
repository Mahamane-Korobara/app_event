Tutoriel : Inscription Utilisateur avec Laravel + V√©rification Email
1. Cr√©ation des tables

Laravel te fournit d√©j√† une migration users pr√™te √† l‚Äôemploi.
Voici ce qu‚Äôelle contient d‚Äôimportant :

$table->id();
$table->string('name');
$table->string('email')->unique();
$table->timestamp('email_verified_at')->nullable(); // V√©rification email
$table->string('password');
$table->rememberToken(); // Gestion sessions "remember me"
$table->timestamps(); // created_at et updated_at


üëâ email_verified_at sera rempli automatiquement quand l‚Äôutilisateur cliquera sur son lien de confirmation.
üëâ rememberToken est utilis√© si tu ajoutes la case "se souvenir de moi".

Ex√©cute la migration :

php artisan migrate

2. Cr√©ation du contr√¥leur

On g√©n√®re un contr√¥leur d√©di√© √† l‚Äôauthentification :

php artisan make:controller AuthController


Dans ce contr√¥leur, on ajoute la m√©thode register() qui :

Valide les donn√©es via RegisterRequest

Hash le mot de passe

Cr√©e l‚Äôutilisateur

Envoie un email de confirmation

Exemple :

namespace App\Http\Controllers;

use App\Http\Requests\RegisterRequest;
use App\Models\User;
use Illuminate\Support\Facades\Hash;

class AuthController extends Controller
{
    public function register(RegisterRequest $request)
    {
        $validatedData = $request->validated();

        $user = User::create([
            'name' => $validatedData['name'],
            'email' => $validatedData['email'],
            'password' => Hash::make($validatedData['password']),
        ]);

        // Envoie automatique de l‚Äôemail de v√©rification
        $user->sendEmailVerificationNotification();

        return response()->json([
            'message' => "Utilisateur {$user->name} cr√©√© avec succ√®s. V√©rifiez votre email."
        ]);
    }
}

3. Cr√©ation de la Form Request (RegisterRequest)

On g√©n√®re une Form Request :

php artisan make:request RegisterRequest


Puis on d√©finit les r√®gles de validation :

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class RegisterRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        return [
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:6',
        ];
    }

    public function messages(): array
    {
        return [
            'name.required' => 'Le nom est obligatoire',
            'email.required' => 'L\'email est obligatoire',
            'email.email' => 'Le format de l\'email est invalide',
            'email.unique' => 'Cet email est d√©j√† utilis√©',
            'password.required' => 'Le mot de passe est obligatoire',
            'password.min' => 'Le mot de passe doit contenir au moins 6 caract√®res',
        ];
    }
}

4. Configuration du mod√®le User

On active la v√©rification d‚Äôemail en impl√©mentant l‚Äôinterface MustVerifyEmail :

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable implements MustVerifyEmail
{
    use HasFactory, Notifiable;

    protected $fillable = [
        'name', 'email', 'password',
    ];

    protected $hidden = [
        'password', 'remember_token',
    ];

    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }
}

5. Ajout de la route d‚Äôinscription avec verification

On d√©clare la route dans routes/api.php :

use App\Http\Controllers\AuthController;

Route::post('/register', [AuthController::class, 'register']);
// V√©rification email
Route::get('/email/verify/{id}/{hash}', function (EmailVerificationRequest $request) {
    $request->fulfill(); // Marque l'email comme v√©rifi√©
    return response()->json(['message' => 'Email v√©rifi√© avec succ√®s !']);
})->middleware(['auth:sanctum', 'signed'])->name('verification.verify');

Route::post('/email/verification-notification', function (Request $request) {
    $request->user()->sendEmailVerificationNotification();
    return response()->json(['message' => 'Lien de v√©rification envoy√© !']);
})->middleware(['auth:sanctum', 'throttle:6,1'])->name('verification.send');

Installation de MailHog

Installer Go (n√©cessaire si tu veux compiler MailHog toi-m√™me, mais pas obligatoire si tu prends le binaire d√©j√† pr√™t) :

sudo apt install golang-go


T√©l√©charger la version Linux pr√™te √† l‚Äôemploi depuis GitHub :

wget https://github.com/mailhog/MailHog/releases/download/v1.0.1/MailHog_linux_amd64 -O MailHog


Donner les droits d‚Äôex√©cution :

chmod +x MailHog


Lancer MailHog :

./MailHog

üöÄ Utilisation

Par d√©faut :

SMTP √©coute sur port 1025 ‚Üí c‚Äôest l√† que Laravel enverra les mails.

Interface Web disponible sur http://localhost:8025
.

Dans .env de Laravel, on met bien :

MAIL_MAILER=smtp
MAIL_HOST=127.0.0.1
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="no-reply@monapp.com"
MAIL_FROM_NAME="App Event"

SANCTUM_STATEFUL_DOMAINS=localhost,localhost:3000,127.0.0.1:8000


est de l‚Äôinscription

Envoie une requ√™te avec Postman ou cURL :

POST /api/register
{
  "name": "Mahamane",
  "email": "mahamane@example.com",
  "password": "monsecret123"
}


Tutoriel Complet : Authentification avec Laravel + Sanctum
1Ô∏è‚É£ Cr√©er la Form Request LoginRequest

Commande artisan :

php artisan make:request LoginRequest


Ouvre ensuite app/Http/Requests/LoginRequest.php et ajoute les r√®gles :

<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class LoginRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        return [
            'email' => ['required', 'email'],
            'password' => ['required', 'string', 'min:6'],
        ];
    }

    public function messages()
    {
        return [
            'email.required' => 'L‚Äôemail est obligatoire',
            'email.email' => 'L‚Äôemail doit √™tre valide',
            'password.required' => 'Le mot de passe est obligatoire',
            'password.min' => 'Le mot de passe doit contenir au moins 6 caract√®res',
        ];
    }
}

2Ô∏è‚É£ Modifier le AuthController

Ajoute la m√©thode login() dans app/Http/Controllers/AuthController.php :

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Requests\RegisterRequest;
use App\Http\Requests\LoginRequest;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Auth;

class AuthController extends Controller
{
    public function register(RegisterRequest $request)
    {
        $validateData = $request->validated();

        $utilisateur = User::create([
            'name' => $validateData['name'],
            'email' => $validateData['email'],
            'password' => Hash::make($validateData['password'])
        ]);

        // Envoyer l‚Äôemail de confirmation
        $utilisateur->sendEmailVerificationNotification();

        return response()->json([
            'message' => "Utilisateur {$utilisateur->name} cr√©√© avec succ√®s. V√©rifiez votre email pour la confirmation."
        ]);
    }

    public function login(LoginRequest $request)
    {
        $infoIdentification = $request->only('email', 'password');

        // V√©rification des identifiants
        if (!Auth::attempt($infoIdentification)) {
            Log::warning('Tentative de connexion √©chou√©e', [
                'email' => $infoIdentification['email'],
                'ip' => $request->ip(),
            ]);

            return response()->json(['message' => 'Identifiants invalides'], 401);
        }

        $utilisateur = Auth::user();

        // Cr√©ation d‚Äôun token Sanctum
        $token = $utilisateur->createToken('auth_token')->plainTextToken;

        // Journalisation succ√®s
        Log::info('Connexion r√©ussie', [
            'user_id' => $utilisateur->id,
            'ip' => $request->ip(),
        ]);

        return response()->json([
            'message' => 'Connexion r√©ussie',
            'access_token' => $token,
            'token_type' => 'Bearer',
        ]);
    }
}

3Ô∏è‚É£ Cr√©er la route login

Dans routes/api.php :

use App\Http\Controllers\AuthController;
use Illuminate\Http\Request;

Route::post('/register', [AuthController::class, 'register']);
Route::post('/login', [AuthController::class, 'login'])
    ->middleware('throttle:5,1'); // max 5 tentatives par minute

// Exemple de route prot√©g√©e
Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});

4Ô∏è‚É£ Tester avec Postman
Requ√™te Login

M√©thode : POST

URL : http://127.0.0.1:8000/api/login

Body (JSON) :

{
  "email": "mahamane@example.com",
  "password": "monsecret123"
}

R√©ponse attendue (si identifiants valides) :
{
  "message": "Connexion r√©ussie",
  "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOi...",
  "token_type": "Bearer"
}

5Ô∏è‚É£ Utiliser le token Sanctum

Maintenant pour tester une route prot√©g√©e :

M√©thode : GET

URL : http://127.0.0.1:8000/api/user

Headers :

Authorization: Bearer TON_TOKEN


üëâ Tu recevras les infos de ton utilisateur connect√©.

6Ô∏è‚É£ Journalisation

Tentatives √©chou√©es ‚Üí storage/logs/laravel.log (niveau warning)

Connexion r√©ussie ‚Üí storage/logs/laravel.log (niveau info)

‚úÖ R√©sultat Final

Tu as maintenant :

Validation s√©curis√©e des identifiants.

Limitation des tentatives de connexion (anti force brute).

Cr√©ation d‚Äôun token Sanctum apr√®s login.

Journalisation des tentatives.

Acc√®s s√©curis√© aux routes prot√©g√©es via auth:sanctum.